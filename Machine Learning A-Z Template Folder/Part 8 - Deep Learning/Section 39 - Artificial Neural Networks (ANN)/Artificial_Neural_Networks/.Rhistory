swirl()
dim(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
flags$animate
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population,  flags$landmass, summary)
library(swirl)
swirl()
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
inside.names(plants)
names(plants)
head(plants)
head()
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
back()
home()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20 ,10, replace = FALSE)
sample(1:20 ,10)
dim(LETTERS)
LETTERS
sample(LETTERS)
flips <- sample(c(0:1), 100, replace = TRUE,  prob = c(0.3, 0.7))
flips <- sample(c(0:1), 100, replace = TRUE,prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(c(0:1), size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, std = 25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
install.packages("caret")
devtools::install_github("abresler/nbastatR")
install_github("abresler/nbastatR")
install(devtools)
install.packages(devtools)
install_github()
install_github("abresler/nbastatR")
library(devtools)
install.packages("devtools")
devtools::install_github("abresler/nbastatR")
library("nbastatR")
library("nbastatR")
devtools::install_github("abresler/nbastatR")
library("devtools", lib.loc="~/R/win-library/3.2")
devtools::install_github("abresler/nbastatR")
install.packages("curlconverter")
devtools::install_github("abresler/nbastatR")
install.packages("dbi")
install.packages("DBI")
devtools::install_github("abresler/nbastatR")
myfunction <- function(x){
install.packages(x)
}
x <- "DBI"
myfuntion()
x <- "DBI"
myfuntion(x)
myfuntion(x)
myfunction <- function(x){
install.packages(x)
}
myfuntion(x)
myfunction <- function(x){
x*x
}
x <- 10
myfuntion(x)
myfuntion(x)
f <- myfuntion(x)
f
myfunction <- function(x){
x*x
}
x <- 10
myfuntion(x)
myfunction <- function(x){
x*x
}
x <- 10
myfunction(x)
myfunction <- function(x){
install.packages(x)
}
x <- "assertthat"
myfunction(x)
devtools::install_github("abresler/nbastatR")
x <- "tibble"
myfunction(x)
devtools::install_github("abresler/nbastatR")
x <- "htmltools"
myfunction(x)
devtools::install_github("abresler/nbastatR")
x <- "htmlwidgets"
myfunction(x)
devtools::install_github("abresler/nbastatR")
x <- "knitr"
myfunction(x)
devtools::install_github("abresler/nbastatR")
x <- "rmarkdown"
myfunction(x)
devtools::install_github("abresler/nbastatR")
x <- "rvest"
myfunction(x)
x <- "rvest"
myfunction(x)
devtools::install_github("abresler/nbastatR")
x <- "chron"
myfunction(x)
devtools::install_github("abresler/nbastatR")
library("nbastatR")
warnings()
devtools::install_github("abresler/nbastatR")
library("nbastatR", lib.loc="~/R/win-library/3.2")
profiles_2016_season <-
get_season_player_profiles(year.season_start = 2015, include_headline_stats = T,
only_rostered_players = T,
message = T)
profiles_2015_season <-
get_season_player_profiles(year.season_start = 2014, include_headline_stats = T,
only_rostered_players = T,
message = T)
get_nba_players_ids(league = "NBA",
active_only = F)
get_nba_players_ids(league = "NBA",
active_only = T)
active_players <- get_nba_players_ids(league = "NBA",
active_only = T)
dim(active_players)
names(active_players)
str(active_players$id.team)
str(active_players$team)
active_players[active_players$team = "Phoenix Suns",]
active_players[active_players$team == "Phoenix Suns",]
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",  subdir = "R Package/ffanalytics")
x <- "httpuv"
myfunction(x)
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",
subdir = "R Package/ffanalytics")
x <- "xtable"
myfunction(x)
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",
subdir = "R Package/ffanalytics")
x <- "Formula"
myfunction(x)
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",
subdir = "R Package/ffanalytics")
x <- "acepack"
myfunction(x)
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",
subdir = "R Package/ffanalytics")
x <- "latticeExtra"
myfunction(x)
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",
subdir = "R Package/ffanalytics")
x <- "gridExtra"
myfunction(x)
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",
subdir = "R Package/ffanalytics")
x <- "RJSONIO"
myfunction(x)
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",
subdir = "R Package/ffanalytics")
library("ffanalytics")
?runScrape
runScrape(season = 2016, week = 1, positions = "TE")
runScrape(season = 2016, week = 1,  positions = "TE")
runScrape(season = 2016, week = 1,  analysts = c(1:18), positions = "TE")
get_day_nba_games("02/11/2016")
get_day_nba_games("02/02/2016")
get_day_nba_games("01/02/2016")
get_day_nba_games("01/02/2015")
library(swirl)
swirl()
swir()
swirl()
swirl()
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 +1000
my_div
librar(swirl)
library(swirl)
swirl()
?copy
?copy
?copy
??copy
copy("mytest2.R", "mytest3.R")
?file.copy
file.copy("mytest2.R", "mytest3.R")
?file.path
file.path(mytest3.R)
file.path("mytest3.R")
file.path("mytest3.R", "folder1", "folder2")
file.path("mytest3.R", 'folder1', 'folder2')
file.path('folder1', 'folder2',"mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path("testdir2", "testdir2"), recursive = TRUE)
dir.create(file.path('testdir2', 'testdir2'), recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
':'
':'
?':'
seq(1,20)
seq(0,10)
seq(0,10, by=0.5)
seq(5,10, length = 30)
my_seq <= seq(5,10, length = 30)
my_seq => seq(5,10, length = 30)
my_seq <= seq(5,10, length = 30)
my_seq <- seq(5,10, length = 30)
length(my_seq)
seq(1, length(my_seq))
1:length(my_seq)
seq(1, length(my_seq))
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(1,2,3), times 10)
rep(c(1,2,3), times= 10)
rep(c(0,1,2), times= 10)
rep(c(0,1,2), each = 10)
library("XML")
library("stringr")
library("ggplot2")
library("plyr")
#Suffix
suffix <- "nfl"
#Functions
source(paste(getwd(),"/R Scripts/Functions/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/Functions/League Settings.R", sep=""))
#Download fantasy football projections from NFL.com
qb1_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?position=1&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
qb2_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=26&position=1&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
rb1_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?position=2&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
rb2_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=26&position=2&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
rb3_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=51&position=2&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
rb4_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=76&position=2&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr1_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr2_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=26&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr3_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=51&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr4_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=76&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr5_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=101&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr6_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=126&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
te1_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?position=4&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
te2_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=26&position=4&sort=projectedPts&statCategory=projectedStats&statSeason=2016&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
#Add variable names for each object
fileList <- c("qb1_nfl","qb2_nfl","rb1_nfl","rb2_nfl","rb3_nfl","rb4_nfl","wr1_nfl","wr2_nfl","wr3_nfl","wr4_nfl","wr5_nfl","wr6_nfl","te1_nfl","te2_nfl")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[1:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("player_nfl","opp_nfl","gp_nfl","passYds_nfl","passTds_nfl","passInt_nfl","rushYds_nfl","rushTds_nfl","recYds_nfl","recTds_nfl","fumbleTds_nfl","twoPts_nfl","fumbles_nfl","pts_nfl")
t[t == "-"] <- 0
assign(fileList[i], t)
}
#Merge players within position
qb_nfl <- rbind(qb1_nfl,qb2_nfl)
rb_nfl <- rbind(rb1_nfl,rb2_nfl,rb3_nfl,rb4_nfl)
wr_nfl <- rbind(wr1_nfl,wr2_nfl,wr3_nfl,wr4_nfl,wr5_nfl,wr6_nfl)
te_nfl <- rbind(te1_nfl,te2_nfl)
#Add variable for player position
qb_nfl$pos <- as.factor("QB")
rb_nfl$pos <- as.factor("RB")
wr_nfl$pos <- as.factor("WR")
te_nfl$pos <- as.factor("TE")
#Merge players across positions
projections_nfl <- rbind(qb_nfl,rb_nfl,wr_nfl,te_nfl)
#Add missing variables
projections_nfl$passAtt_nfl <- NA
projections_nfl$passComp_nfl <- NA
projections_nfl$rushAtt_nfl <- NA
projections_nfl$rec_nfl <- NA
projections_nfl$returnTds_nfl <- NA
#Convert variables from character strings to numeric
projections_nfl[,c("gp_nfl","passAtt_nfl","passComp_nfl","passYds_nfl","passTds_nfl","passInt_nfl","rushAtt_nfl","rushYds_nfl","rushTds_nfl","rec_nfl","recYds_nfl","recTds_nfl","fumbleTds_nfl","returnTds_nfl","twoPts_nfl","fumbles_nfl","pts_nfl")] <-
convert.magic(projections_nfl[,c("gp_nfl","passAtt_nfl","passComp_nfl","passYds_nfl","passTds_nfl","passInt_nfl","rushAtt_nfl","rushYds_nfl","rushTds_nfl","rec_nfl","recYds_nfl","recTds_nfl","fumbleTds_nfl","returnTds_nfl","twoPts_nfl","fumbles_nfl","pts_nfl")], "numeric")
#Player names
qbnames <- str_sub(projections_nfl$player_nfl, end=str_locate(string=projections_nfl$player_nfl, c("QB"))[,1]-2) #"QB -"
rbnames <- str_sub(projections_nfl$player_nfl, end=str_locate(string=projections_nfl$player_nfl, c("RB"))[,1]-2) #"RB -"
wrnames <- str_sub(projections_nfl$player_nfl, end=str_locate(string=projections_nfl$player_nfl, c("WR"))[,1]-2) #"WR -"
tenames <- str_sub(projections_nfl$player_nfl, end=str_locate(string=projections_nfl$player_nfl, c("TE"))[,1]-2) #"TE -"
qbnames <- qbnames[1:length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"])]
rbnames <- rbnames[(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + 1):(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]))]
wrnames <- wrnames[(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]) + 1):(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "WR"),"pos"]))]
tenames <- tenames[(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "WR"),"pos"]) + 1):(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "WR"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "TE"),"pos"]))]
projections_nfl$name_nfl <- c(na.omit(qbnames),na.omit(rbnames),na.omit(wrnames),na.omit(tenames))
projections_nfl$name <- nameMerge(projections_nfl$name_nfl)
#Player teams
projections_nfl$team_nfl <- str_trim(str_sub(projections_nfl$player_nfl, start=str_locate(string=projections_nfl$player_nfl, c(" - "))[,1]+3, end=str_locate(string=projections_nfl$player_nfl, c(" - "))[,1]+6)) #, end=str_locate(string=projections_nfl$player_nfl, c("-"))[,1]+5
#Remove duplicate cases
projections_nfl[projections_nfl$name %in% projections_nfl[duplicated(projections_nfl$name),"name"],]
#projections_nfl[which(projections_nfl$name_nfl=="Charles Clay"),"pos"] <- "TE"
#Rename players
projections_nfl[projections_nfl$name=="TIMOTHYWRIGHT", "name"] <- "TIMWRIGHT"
#Calculate overall rank
projections_nfl$overallRank_nfl <- rank(-projections_nfl$pts_nfl, ties.method="min")
#Calculate Position Rank
projections_nfl$positionRank_nfl <- NA
projections_nfl[which(projections_nfl$pos == "QB"), "positionRank_nfl"] <- rank(-projections_nfl[which(projections_nfl$pos == "QB"), "pts_nfl"], ties.method="min")
projections_nfl[which(projections_nfl$pos == "RB"), "positionRank_nfl"] <- rank(-projections_nfl[which(projections_nfl$pos == "RB"), "pts_nfl"], ties.method="min")
projections_nfl[which(projections_nfl$pos == "WR"), "positionRank_nfl"] <- rank(-projections_nfl[which(projections_nfl$pos == "WR"), "pts_nfl"], ties.method="min")
projections_nfl[which(projections_nfl$pos == "TE"), "positionRank_nfl"] <- rank(-projections_nfl[which(projections_nfl$pos == "TE"), "pts_nfl"], ties.method="min")
#Order variables in data set
projections_nfl <- projections_nfl[,c(prefix, paste(varNames, suffix, sep="_"))]
#Order players by overall rank
projections_nfl <- projections_nfl[order(projections_nfl$overallRank_nfl),]
row.names(projections_nfl) <- 1:dim(projections_nfl)[1]
#Density Plot
ggplot(projections_nfl, aes(x=pts_nfl), fill=pos) + geom_density(fill="green", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of NFL.com Projected Points")
ggsave(paste(getwd(),"/Figures/NFL projections.jpg", sep=""), width=10, height=10)
dev.off()
#Save file
save(projections_nfl, file = paste(getwd(), "/Data/NFL-Projections.RData", sep=""))
write.csv(projections_nfl, file=paste(getwd(), "/Data/NFL-Projections.csv", sep=""), row.names=FALSE)
save(projections_nfl, file = paste(getwd(), "/Data/Historical Projections/NFL-Projections-", season, ".RData", sep=""))
write.csv(projections_nfl, file=paste(getwd(), "/Data/Historical Projections/NFL-Projections-", season, ".csv", sep=""), row.names=FALSE)
#Load libraries
library("XML")
library("stringr")
library("ggplot2")
library("plyr")
source(paste(getwd(),"/R Scripts/Functions/Functions.R", sep=""))
#Load libraries
library("XML")
library("stringr")
library("ggplot2")
library("plyr")
1+3
a = 1+3
a
a <- [0:1, 5]
a
a <- [0:1; 5]
a
a <- a(0:1; 5)
a
a <- c(0:1; 5)
a
a <- c(0:1, 5)
a
for i < a
a*2
END
for i < a
a*2
for i < a,
a*2
for i < a a*2
for (i < a) {
a*2
}
for (i < a) {
i*2
}
for (i < 5) {
i*2
}
for (i in a) {
i*2
}
8*7
samples <- c(rep(1:10))
for (thissample in samples)
{
print(thissample)
}
for (thissample in samples)
{
print(thissample/2)
}
for (i in samples)
{
print(i/5)
}
a <- c(1:11)
print(a)
?list
m <- matrix(data = a, nrow = 1, ncol = 4, byrow = FALSE,
dimnames = NULL)
m
m <- matrix(data = a, nrow = 3, ncol = 4, byrow = FALSE,
dimnames = NULL)
m
transpose(m)
?df
?dataframe
?data frame
?data.frame
m <- matrix(data = a, nrow = 3, ncol = 4, byrow = FALSE,
dimnames = NULL)
m
a <- c(1:11)
print(a)
m <- matrix(data = a, nrow = 3, ncol = 4, byrow = FALSE,
dimnames = NULL)
m
m*a
a2 <- a[4,1]
a2 <- a[:4]
a2 <- a[4]
a2
a2 <- a[:4]
a2 <- a[1:4]
a2
a2 *m
a2 <- a[1:3]
a2
a2 *m
m2 <- a2 *m
m2 * m
m2 * 'm
m2 * m
m2 * m
m2 * m
m2 * m
getwd()
setwd("C:/Users/david/Google Drive/tanul/machine_learning/udemy/Machine Learning A-Z Template Folder/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)/Artificial_Neural_Networks")
install.packages('h2o')
library(h2o)
# Artificial Neural Network
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
h2o.init(nthreads = -1)
model = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5,5),
epochs = 100,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = h2o.predict(model, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
(1506+198)/2000
h2o.shutdown()
